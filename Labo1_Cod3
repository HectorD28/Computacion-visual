#define _USE_MATH_DEFINES
#include <stdlib.h>
#include <math.h>
#include <GL/glut.h>

void init(void);
void display(void);
void reshape(int, int);

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(500, 500);
	glutCreateWindow(argv[0]);
	init(); 
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutMainLoop();
	return 0;
}

void init(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0); // Parametros: rojo, verde y azul
	glShadeModel(GL_FLAT);
}

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	glPushMatrix(); // Salva el estado actual de la matriz

	glColor3f(1, 0, 0);
	glPointSize(4);
	glBegin(GL_LINE_LOOP);
		// Circunferencia cuya variación es entre 0 y 2pi
		// Angulos en radianes
		GLint num_vertices;
		GLfloat r_menor, r_mayor, n_divisiones, acum;
		r_menor = 6;
		r_mayor = 9;
		n_divisiones = 60;
		acum = 0;
		num_vertices = 0;

	
		for (num_vertices = 0; num_vertices < 16*3; num_vertices++)
		{
			if (num_vertices == 0)
			{
				glVertex2f(0, 0);
			}
			else if ((num_vertices/2) % 2 == 1)
			{
				glVertex2f(r_mayor * sin(acum), r_mayor * cos(acum));
				if (num_vertices % 2 != 1) 
				{
					acum = acum + (2 * M_PI) / n_divisiones;
				}
			}
			else
			{
				if ((num_vertices/2) % 2 == 0)
				{
					glVertex2f(r_menor * sin(acum), r_menor * cos(acum));
					if (num_vertices % 2 != 1) 
					{
						acum = acum + (2 * M_PI) / n_divisiones;
					}
				}
			}
		}
		

	glEnd();

	glPopMatrix(); // Recupera el valor de la matriz
	glFlush(); // Ejecuta funciones OpenGL en tiempo finito
}

void reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);
	glMatrixMode(GL_PROJECTION); // Define la pila de matrices
	glLoadIdentity(); // Limpia la matriz proyeccion para inicializarla con la matriz identidad
	glOrtho(-10.0, 10.0, -10.0, 10.0, -10.0, 10.0); // Proyección ortogonal
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}
